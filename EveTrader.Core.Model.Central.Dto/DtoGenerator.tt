<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension="cs" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EveTrader.Core.Model.Central" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Collections" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Manager.tt" #>
<#@ VolatileAssembly processor="T4Toolbox.VolatileAssemblyProcessor" name="..\EveTrader.Core.Model.Central\bin\Release\EveTrader.Core.Model.Central.dll" #>
<#@ VolatileAssembly processor="T4Toolbox.VolatileAssemblyProcessor" name="..\EveTrader.Core.Interfaces\bin\Release\EveTrader.Core.Interfaces.dll" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
// <copyright file="DtoGenerator.tt" company="Elvian Empire">
//  Copyright © Elvian Empire. All Rights Reserved.
// </copyright>
// Code generated by a template
using System;
using System.Collections.Generic;

namespace EveTrader.Core.Model.Central
{
<# 
manager.EndBlock();
PushIndent("    ");
foreach(var t in Assembly.GetAssembly(typeof(CentralModel)).GetTypes().Where(s => s.IsSubclassOf(typeof(EntityObject))))
{ 	
	manager.StartNewFile(t.Name + ".generated.cs");
	WriteLine("public class {0}Dto", t.Name);
	WriteLine("{");
	PushIndent("    ");
	foreach(var pt in t.GetProperties())
	{
		if(pt.CanRead && pt.CanWrite)
		{
			if(pt.PropertyType.Namespace == "System")
			{
				WriteLine("public {0} {1} {{ get; set; }}", pt.PropertyType.Name, pt.Name);
			}
				
			if(pt.PropertyType.IsSubclassOf(typeof(EntityObject)))
			{
				WriteLine("public {0}Dto {1} {{ get; set; }}", pt.PropertyType.Name, pt.Name);
			}
			if(pt.PropertyType.GetInterface("IEnumerable`1") != null && pt.PropertyType.IsGenericType)
			{
				WriteLine("public IEnumerable<{1}Dto> {2} {{ get; set; }}", pt.PropertyType.Name, pt.PropertyType.GetGenericArguments().First().Name, pt.Name);
			}
		}

	}
	PopIndent();
	WriteLine("}");
manager.EndBlock();
}
PopIndent();
manager.StartFooter(); #>
}
<# manager.EndBlock(); #>
<# manager.Process(false); #>